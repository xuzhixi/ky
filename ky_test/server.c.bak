#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/epoll.h> 

#include <ky_socket.h>
#include <ky_reactor.h>

typedef struct parameter_t
{
	ky_reactor_t *rat;
	ky_socket_t sk;
}parameter_t;

void handle_msg(void *parameter)
{
	parameter_t *param = parameter;
	ky_socket_t *client = &(param->sk);	
	ky_reactor_t *rat = param->rat;
	char msg[100];
	int recvLen;

	recvLen = ky_sock_recv(client, msg, sizeof(msg));
	while (  recvLen > 0 )
	{
		//读取信息
		msg[ recvLen ] = '\0';
		printf("recv msg is %s\n", msg);
		if ( strcmp( msg, "echo" ) == 0 )
		{
			//发送信息
			strcpy(msg, "Hello World!");
			ky_sock_send(client, msg, strlen(msg));

			//ky_reactor_del(rat, client, EPOLLIN);
			//ky_reactor_del_socket(rat, client);
		}
		recvLen = ky_sock_recv(client, msg, sizeof(msg));
	}
	if ( recvLen == 0 )
	{
		printf("close connect!!!\n");
		ky_sock_close(client);
		ky_reactor_del_socket(rat, client);
	}
	else if ( recvLen < 0 )
	{
		printf("no recv msg!\n");
	}
}

void handle_close(void *parameter)
{
	parameter_t *param = parameter;
	ky_socket_t *client = &(param->sk);

	//关闭连接,也可以用close(new_fd);
	//shutdown(new_fd, 2);
	printf("-------------------------------------close connect!!!\n");
	ky_sock_close(client);
}

void handle_connect(void *parameter)
{
	parameter_t *param = parameter;
	ky_socket_t *server = &(param->sk);
	ky_reactor_t *rat = param->rat;
	parameter_t pp;
	ky_socket_t client;
	char ip[16];

	while (1)
	{
		// 因为使用了epoll的EL模式，所以要循环处理直到等待队列为空
		// (即accept返回-1), epoll的EL模式应该使用no-block的fd
		if (ky_sock_accept(&client, KY_NOBLOCK, server) != 0)
		{
			printf("sock_accept error\n");
			break;
		}
		//打印连接进来主机的ip
		printf("connection from %s:%d\n", ky_sock_get_ip(&client, ip, 16), ky_sock_get_port(&client));
		
		pp.sk = client;
		pp.rat = rat;
		ky_reactor_add(rat, &client, EPOLLIN, handle_msg, &pp, sizeof(parameter_t));
		//ky_reactor_add(rat, &client, EPOLLHUP, handle_close, &client, sizeof(ky_socket_t));
	}
}


int main()
{
	ky_socket_t server;
	ky_reactor_t *rat;
	parameter_t param;

	if (ky_sock_init(&server, KY_ADDR_ANY, 5566, SOCK_STREAM, KY_NOBLOCK) != 0)
	{
		printf("sock_init error\n");
		return -1;
	}

	if (ky_sock_listen(&server, 100) != 0)
	{
		printf("sock_listen error\n");
		return -1;
	}

	rat = ky_reactor_new(500, KY_REACTOR_ET);
	param.sk = server;
	param.rat = rat;
	ky_reactor_add(rat, &server, EPOLLIN, handle_connect, &param, sizeof(parameter_t));

	ky_reactor_event_loop(rat);

	// 关闭服务器
	ky_sock_close(&server);
	// 释放reactor
	ky_reactor_release( rat );

	return 0;
}

